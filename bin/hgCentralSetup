#!/usr/bin/env python
"""Program to create a copy of key hgcentral tables in another
database and add mouse strain specific entries. Edit
definition table in this program to add new species.
The chromInfo table must be loaded before using this.  Species
without a chromInfo or database will be skipped.  The following
tables will be copied from the specified hgcentral database
to the specify shared mouse database:
  dbdb defaultDb genomeClade clade
"""
from __future__ import print_function
import os, sys   
import argparse
import collections
import subprocess
sys.path.append("/hive/groups/recon/local/pycbio/lib")
from pycbio.sys import dbOps, fileOps
from pycbio.hgdata import hgDb

dbOps.mySqlSetErrorOnWarn()
 
# constants for database and file system
gbdb = "/hive/groups/recon/projs/mus_strain_cactus/pipeline_data/browser/gbdb"
clade = "musStrains"
cladeLabel = "Mus Strains"

# table of genome definitions; taxid is faked to make gateway work
GDef = collections.namedtuple("GDef", ("genome", "scientificName", "taxid"))
genomeDefs = (
    GDef("129S1_SvImJ",   "Mus musculus 129S1/SvImJ", 10090001),
    GDef("A_J",           "Mus musculus A/J",         10090002),
    GDef("AKR_J",         "Mus musculus AKR/J",       10090003),
    GDef("BALB_cJ",       "Mus musculus BALB/cJ",     10090004),
    GDef("C3H_HeJ",       "Mus musculus C3H/HeJ",     10090005),
    GDef("C57B6J",        "Mus musculus C57BL/6J",    10090006),
    GDef("C57BL_6NJ",     "Mus musculus C57BL/6NJ",   10090007),
    GDef("CAROLI_EiJ",    "Mus caroli/EiJ",           10089),
    GDef("CAST_EiJ",      "Mus castaneus/EiJ",        10090008),
    GDef("CBA_J",         "Mus musculus CBA/J",       10090009),
    GDef("DBA_2J",        "Mus musculus DBA/2J",      10090010),
    GDef("FVB_NJ",        "Mus musculus FVB/NJ",      10090011),
    GDef("LP_J",          "Mus musculus LP/J",        10090012),
    GDef("NOD_ShiLtJ",    "Mus musculus NOD/ShiLtJ",  10090013),
    GDef("NZO_HlLtJ",     "Mus musculus NZO/HILtJ",   10090014),
    GDef("PWK_PhJ",       "Mus musculus PWK/PhJ",     10090015),
    GDef("Pahari_EiJ",    "Mus pahari/EiJ",           10093),
    GDef("SPRET_EiJ",     "Mus spretus/EiJ",          10096),
    GDef("WSB_EiJ",       "Mus musculus WSB/EiJ",     10090016),
)

def parseArgs():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--assemblies", metavar="assemblies", dest="assemblies",  nargs="+",
                        required=True,
                        help="List of assembly numbers to add.  Previous assemblies not specified will no longer be included unless specified. The last one becomes the default")
    parser.add_argument("hgCentralDb", help="hgcentral database that is the source of the genome")
    parser.add_argument("musSharedDb", help="database for receive updated copy of tables")
    args = parser.parse_args()
    disallowedTargetDbs = ("hgcentral", "hgcentraltest", args.hgCentralDb)
    if args.musSharedDb in disallowedTargetDbs:
        parser.error("databases not allowed as a target due to health paranoid: " + args.hgCentralDb)
    return args

def activeGenomeDefs(conn, assembly):
    "generator of genome defs for genomes with chromInfo tables"
    for gdef in genomeDefs:
        if haveDbChromInfo(conn, genomeDbName(gdef.genome, assembly)):
            yield gdef

def getDescriptionHtmlPath(genomeDb):
    return os.path.join(gbdb, genomeDb, "html/description.html")

def createDescriptionHtmlItem(fh, genomeDb, assembly, description):
    fh.write('<li><a href="/cgi-bin/hgTracks?db={genomeDb}">{description} ({genomeDb} {assembly})</a></li>\n'
             .format(genomeDb=genomeDb, description=description, assembly=assembly))

def createDescriptionAssemblyLinks(conn, assembly, fh):
    fh.write("<h3>{} assembly</h3>\n".format(assembly))
    fh.write("<ul>\n")
    for gdef in activeGenomeDefs(conn, assembly):
        createDescriptionHtmlItem(fh, genomeDbName(gdef.genome, assembly), assembly, gdef.scientificName)
    fh.write("</ul>\n")

def createDescriptionHtmlPage(conn, assemblies, fh):
    fh.write("<h2>Mouse strain project browsers</h2>\n")
    for assembly in reversed(assemblies):
        createDescriptionAssemblyLinks(conn, assembly, fh)

def createDescriptionHtml(conn, genomeDb, assemblies):
    """create description.html, can be used to override standard mouse description file.
    This provides links to all of the mus project assemblies, as well as standard UCSC one."""
    htmlPath = getDescriptionHtmlPath(genomeDb)
    fileOps.ensureFileDir(htmlPath)
    with open(htmlPath, "w") as fh:
        createDescriptionHtmlPage(conn, assemblies, fh)

def buildDescriptionHtmls(conn, assemblies):
    for assembly in assemblies:
        for gdef in activeGenomeDefs(conn, assembly):
            createDescriptionHtml(conn, genomeDbName(gdef.genome, assembly), assemblies)
    # add link from standard mouse
    ucscRefDb = "mm10"
    createDescriptionHtml(conn, ucscRefDb, assemblies)
    dbExecute(conn, "UPDATE dbDb SET htmlPath = %(htmlPath)s WHERE name = %(genome)s",
              {"htmlPath": getDescriptionHtmlPath(ucscRefDb),
               "genome": ucscRefDb})
    
def dbExecute(conn, sql, args=None):
    "execute SQL query on a connection that returns no result"
    cur = conn.cursor()
    try:
        cur.execute(sql, args)
    finally:
        cur.close()

def dbQuery(conn, sql, args=None):
    "generator to run an SQL query on a connection"
    cur = conn.cursor()
    try:
        cur.execute(sql, args)
        for row in cur:
            yield row
    finally:
        cur.close()

def genomeDbName(genome, assembly):
    return "Mus" + genome + "_" + str(assembly)

def verbosePrGenome(msg, gdef, assembly):
    sys.stderr.write("{}: {} {} {}\n".format(msg, gdef.genome, assembly,
                                             genomeDbName(gdef.genome, assembly)))

def haveDbChromInfo(conn, genomeDb):
    "do we have database and chromInfo"
    return next(dbQuery(conn, 'show databases like "%s"'%genomeDb), False) and next(dbQuery(conn, 'show tables from %s like "chromInfo"'%genomeDb), False)

def getDefaultPosition(conn, genomeDb):
    "default is 10KB in the middle of largest sequence"
    row = list(dbQuery(conn, "select * from %s.chromInfo order by size desc limit 1"%genomeDb))[0]
    size = row["size"]
    pos = size/2
    posSize = 10000
    if pos+posSize > size:
        pos = 0
        posSize = size
    return row["chrom"]+":"+str(pos)+"-"+str(pos+posSize)

def cloneTable(conn, srcDb, destDb, table):
    dbExecute(conn, "DROP TABLE IF EXISTS %s.%s;" % (destDb, table))
    dbExecute(conn, "CREATE TABLE %s.%s LIKE %s.%s;" % (destDb, table, srcDb, table))
    dbExecute(conn, "INSERT %s.%s SELECT * from %s.%s;" % (destDb, table, srcDb, table))

def cloneCentralTables(conn, hgCentralDb, musSharedDb):
    for tbl in ("dbDb", "defaultDb", "genomeClade", "clade"):
        cloneTable(conn, hgCentralDb, musSharedDb, tbl)

def dbDbTableAdd(conn, gdef, assembly, orderKey):
    "create a gbdb row from a GDef"
    genomeDb = genomeDbName(gdef.genome, assembly)
    dbExecute(conn, "INSERT INTO dbDb (name, description, nibPath, organism, defaultPos, active, orderKey, genome, scientificName, htmlPath, hgNearOk, hgPbOk, sourceName, taxId) "
              + "VALUES (%(name)s, %(description)s, %(nibPath)s, %(organism)s, %(defaultPos)s, %(active)s, %(orderKey)s, %(genome)s, %(scientificName)s, %(htmlPath)s, %(hgNearOk)s, %(hgPbOk)s, %(sourceName)s, %(taxId)s)",
              {"name": genomeDb,
               "description": gdef.scientificName + ", %s assembly" % (assembly,),
               "nibPath": os.path.join(gbdb, genomeDb, genomeDb+".2bit"),
               "organism": gdef.scientificName,
               "defaultPos": getDefaultPosition(conn, genomeDb),
               "active": 1,
               "orderKey": orderKey,
               "genome": gdef.scientificName,
               "scientificName": gdef.scientificName,
               "htmlPath": getDescriptionHtmlPath(genomeDb),
               "hgNearOk": 0, 
               "hgPbOk": 0,
               "sourceName": "Sanger",
               "taxId": gdef.taxid})

def dbDbTableBuildAssembly(conn, assembly):
    orderKey = 1
    for gdef in activeGenomeDefs(conn, assembly):
        verbosePrGenome("add to dbDb", gdef, assembly)
        dbDbTableAdd(conn, gdef, assembly, orderKey)
        orderKey += 1

def dbDbTableBuild(conn, assemblies):
    for assembly in assemblies:
        dbDbTableBuildAssembly(conn, assembly)

def cladeTableBuild(conn):
    dbExecute(conn, "INSERT INTO clade (name, label, priority) " +
              "VALUES (%s, %s, %s)", (clade, cladeLabel, 0.1)) 

def genomeCladeTableAdd(conn, gdef, priority):
    dbExecute(conn, "INSERT INTO genomeClade (genome, clade, priority) " +
              "VALUES (%s, %s, %s)", (gdef.scientificName, clade, priority)) 

def genomeCladeTableBuild(conn):
    priority = 1
    for gdef in genomeDefs:
        genomeCladeTableAdd(conn, gdef, priority)
        priority += 1

def defaultDbTableAdd(conn, gdef, defaultAssembly):
    dbExecute(conn, "INSERT INTO defaultDb (genome, name) " +
              "VALUES (%s, %s)", (gdef.scientificName, genomeDbName(gdef.genome, defaultAssembly))) 

def defaultDbTableBuild(conn, defaultAssembly):
    for gdef in genomeDefs:
        defaultDbTableAdd(conn, gdef, defaultAssembly)

def main():
    args = parseArgs()
    conn = hgDb.connect(args.musSharedDb, dictCursor=True)
    cloneCentralTables(conn, args.hgCentralDb, args.musSharedDb)
    dbDbTableBuild(conn, args.assemblies)
    defaultDbTableBuild(conn, args.assemblies[-1])
    cladeTableBuild(conn)
    genomeCladeTableBuild(conn)
    buildDescriptionHtmls(conn, args.assemblies)
    conn.close()

main()
