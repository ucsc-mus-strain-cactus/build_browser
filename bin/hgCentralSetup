#!/usr/bin/env python
"""Program to create a copy of key hgcentral tables in another
database and add mouse strain specific entries. Edit
definition table in this program to add new species.
The chromInfo table must be loaded before using this.  Species
without a chromInfo or database will be skipped.  The following
tables will be copied from the specified hgcentral database
to the specify shared mouse database:
  dbdb defaultDb genomeClade clade
"""

import os, sys   
import argparse
import collections
import subprocess
sys.path.append("/hive/groups/recon/local/pycbio/lib")
from pycbio.sys import dbOps
from pycbio.hgdata import hgDb

# constants for database and file system
gbdb = "/hive/groups/recon/projs/mus_strain_cactus/pipeline_data/browser/gbdb"
clade = "musStrains"
cladeLabel = "Mus Strains"

# table of genome definitions
GDef = collections.namedtuple("GDef", ("genome", "scientificName", "taxid"))
genomeDefs = (
    GDef("129S1",        "Mus musculus 129S1/SvImJ", 10090),
    GDef("AJ",           "Mus musculus A/J",         10090),
    GDef("AKRJ",         "Mus musculus AKR/J",       10090),
    GDef("BALBcJ",       "Mus musculus BALB/cJ",     10090),
    GDef("C3HHeJ",       "Mus musculus C3H/HeJ",     10090),
    GDef("C57B6J",       "Mus musculus C57BL/6J",    10090),
    GDef("C57B6NJ",      "Mus musculus C57BL/6NJ",   10090),
    GDef("CAROLIEiJ",    "Mus caroli/EiJ",           10089),
    GDef("CASTEiJ",      "Mus castaneus/EiJ",    10090),
    GDef("CBAJ",         "Mus musculus CBA/J",       10090),
    GDef("DBA2J",        "Mus musculus DBA/2J",      10090),
    GDef("FVBNJ",        "Mus musculus FVB/NJ",      10090),
    GDef("LPJ",          "Mus musculus LP/J",        10090),
    GDef("NODShiLtJ",    "Mus musculus NOD/ShiLtJ",  10090),
    GDef("NZOHlLtJ",     "Mus musculus NZO/HILtJ",   10090),
    GDef("PAHARIEiJ",    "Mus pahari/EiJ",           10093),
    GDef("PWKPhJ",       "Mus musculus PWK/PhJ",     10090),
    GDef("SPRETEiJ",     "Mus spretus/EiJ",          10096),
    GDef("WSBEiJ",       "Mus musculus WSB/EiJ",     10090),
)

def parseArgs():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--assembly", metavar="assembly", dest="assemblies",
                        required=True, action="append",
                        help="Assembly numbers to add.  Previous Assemblies not specified will no longer be included. Maybe repeated, the last one becomes the default")
    parser.add_argument("hgCentralDb", help="hgcentral database that is the source of the genome")
    parser.add_argument("musSharedDb", help="database for receive updated copy of tables")
    args = parser.parse_args()
    disallowedTargetDbs = ("hgcentral", "hgcentraltest", args.hgCentralDb)
    if args.musSharedDb in disallowedTargetDbs:
        parser.error("databases not allowed as a target due to health paranoid: " + args.hgCentralDb)
    return args

def genomeDbName(genome, assembly):
    return "Mus" + genome + "_" + str(assembly)

def haveDbChromInfo(conn, genomeDb):
    "do we have database and chromInfo"
    return next(dbOps.query(conn, 'show databases like "%s"'%genomeDb), False) and next(dbOps.query(conn, 'show tables from %s like "chromInfo"'%genomeDb), False)

def getDefaultPosition(conn, genomeDb):
    "default is 10KB of largest sequence"
    row = list(dbOps.query(conn, "select * from %s.chromInfo order by size desc limit 1"%genomeDb))[0]
    size = row["size"]
    posSize = 10000
    if size < posSize:
        posSize = size
    return row["chrom"]+":0-"+str(posSize)

def cloneTable(conn, srcDb, destDb, table):
    dbOps.execute(conn, "DROP TABLE IF EXISTS %s.%s;" % (destDb, table))
    dbOps.execute(conn, "CREATE TABLE %s.%s LIKE %s.%s;" % (destDb, table, srcDb, table))
    dbOps.execute(conn, "INSERT %s.%s SELECT * from %s.%s;" % (destDb, table, srcDb, table))

def cloneCentralTables(conn, hgCentralDb, musSharedDb):
    for tbl in ("dbDb", "defaultDb", "genomeClade", "clade"):
        cloneTable(conn, hgCentralDb, musSharedDb, tbl)

def dbDbTableAdd(conn, gdef, assembly, orderKey):
    "create a gbdb row from a GDef"
    genomeDb = genomeDbName(gdef.genome, assembly)
    dbOps.execute(conn, "INSERT INTO dbDb (name, description, nibPath, organism, defaultPos, active, orderKey, genome, scientificName, htmlPath, hgNearOk, hgPbOk, sourceName, taxId) "
                  + "VALUES (%(name)s, %(description)s, %(nibPath)s, %(organism)s, %(defaultPos)s, %(active)s, %(orderKey)s, %(genome)s, %(scientificName)s, %(htmlPath)s, %(hgNearOk)s, %(hgPbOk)s, %(sourceName)s, %(taxId)s)",
                  {"name": genomeDb,
                   "description": gdef.scientificName + ", %s assembly" % (assembly,),
                   "nibPath": os.path.join(gbdb, genomeDb, genomeDb+".2bit"),
                   "organism": gdef.scientificName,
                   "defaultPos": getDefaultPosition(conn, genomeDb),
                   "active": 1,
                   "orderKey": orderKey,
                   "genome": gdef.scientificName,
                   "scientificName": gdef.scientificName,
                   "htmlPath": os.path.join(gbdb, genomeDb, "html/description.html"),
                   "hgNearOk": 0, 
                   "hgPbOk": 0,
                   "sourceName": "Sanger",
                   "taxId": gdef.taxid})

def dbDbTableBuildAssembly(conn, assembly):
    orderKey = 1
    for gdef in genomeDefs:
        if haveDbChromInfo(conn, genomeDbName(gdef.genome, assembly)):
            dbDbTableAdd(conn, gdef, assembly, orderKey)
            orderKey += 1

def dbDbTableBuild(conn, assemblies):
    for assembly in assemblies:
        dbDbTableBuildAssembly(conn, assembly)

def cladeTableBuild(conn):
    dbOps.execute(conn, "INSERT INTO clade (name, label, priority) " +
                  "VALUES (%s, %s, %s)", (clade, cladeLabel, 0.1)) 

def genomeCladeTableAdd(conn, gdef, priority):
    dbOps.execute(conn, "INSERT INTO genomeClade (genome, clade, priority) " +
                  "VALUES (%s, %s, %s)", (gdef.scientificName, clade, priority)) 

def genomeCladeTableBuild(conn):
    priority = 1
    for gdef in genomeDefs:
        genomeCladeTableAdd(conn, gdef, priority)
        priority += 1

def defaultDbTableAdd(conn, gdef, defaultAssembly):
    dbOps.execute(conn, "INSERT INTO defaultDb (genome, name) " +
                  "VALUES (%s, %s)", (gdef.scientificName, genomeDbName(gdef.genome, defaultAssembly))) 

def defaultDbTableBuild(conn, defaultAssembly):
    for gdef in genomeDefs:
        defaultDbTableAdd(conn, gdef, defaultAssembly)

def main():
    args = parseArgs()
    conn = hgDb.connect(args.musSharedDb, dictCursor=True)
    cloneCentralTables(conn, args.hgCentralDb, args.musSharedDb)
    dbDbTableBuild(conn, args.assemblies)
    defaultDbTableBuild(conn, args.assemblies[-1])
    cladeTableBuild(conn)
    genomeCladeTableBuild(conn)
    conn.close()

main()
