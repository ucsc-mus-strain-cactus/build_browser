"""
Produces trackDb files for the Augustus tracks generated by Mario.
"""

import sys
import os
import argparse

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--assembly_version', help='genome assembly version (1504, etc)', required=True)
    parser.add_argument('--ref_genome', help='reference genome', required=True)
    parser.add_argument('--genome', help='genome', required=True)
    parser.add_argument('--base_data_dir', default="/hive/groups/recon/projs/mus_strain_cactus/pipeline_data/comparative/1504/augustus/")
    return parser.parse_args()

supertrack = """track augustus
superTrack on show
shortLabel AUGUSTUS
longLabel AUGUSTUS gene predictions
group genes
html /hive/groups/recon/projs/mus_strain_cactus/pipeline_data/comparative/1504/augustus/augustus.html

"""

tm = """    track augustusTM
    superTrack augustus pack
    shortLabel AUGUSTUS using TransMap
    longLabel AUGUSTUS using TransMap coding genes
    group genes
    type bigGenePred
    bigDataUrl {}
    priority 1.0
    color 200,0,0
    visibility hide

"""

tmr = """    track augustusTMR
    superTrack augustus pack
    shortLabel AUGUSTUS using TransMap and RNA-Seq
    longLabel AUGUSTUS using TransMap coding genes and RNA-Seq
    group genes
    type bigGenePred
    bigDataUrl {}
    priority 1.0
    color 255,0,0
    visibility pack

"""

cgp = """    track augustusCGP
    superTrack augustus pack
    shortLabel comparative AUGUSTUS
    longLabel comparative AUGUSTUS
    group genes
    type bigGenePred
    bigDataUrl {}
    priority 1.0
    color 100,150,250
    visibility pack

"""


def make_ref_tracks(ref_genome, base_data_dir, file_handle):
    file_handle.write(supertrack)
    data_path = os.path.join(base_data_dir, "cgp", ref_genome + ".bb")
    assert os.path.exists(data_path)
    file_handle.write(cgp.format(data_path))


def make_individual_tracks(genome, base_data_dir, file_handle):
    file_handle.write(supertrack)
    dirs = ["tm", "tmr", "cgp"]
    data_paths = [os.path.join(base_data_dir, x, genome + ".bb") for x in dirs]
    for d, data_path in zip(dirs, data_paths):
        assert os.path.exists(data_path)
        file_handle.write(eval(d).format(data_path))


def main():
    args = parse_args()
    target_file_template = "trackDb/{0}/Mus{0}_{1}/augustus.trackDb.ra"
    file_map = {}
    if args.genome == args.ref_genome:
        target_file = target_file_template.format(args.ref_genome, args.assembly_version)
        with open(target_file, "w") as outf:
            make_ref_tracks(args.genome, args.base_data_dir, outf)
    elif args.assembly_version == "1504":
        target_file = target_file_template.format(args.genome, args.assembly_version)
        with open(target_file, "w") as outf:
            make_individual_tracks(args.genome, args.base_data_dir, outf)
    else:
        print "This script was called on a release that was not 1504 or not on the reference. Did nothing."
        sys.exit(1)


if __name__ == "__main__":
    main()
