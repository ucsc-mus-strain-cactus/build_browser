"""
Produces trackDb files for the Augustus tracks generated by Mario.
"""

import sys
import os
import argparse

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--assembly_version', help='genome assembly version (1504, etc)', required=True)
    parser.add_argument('--ref_genome', help='reference genome', required=True)
    parser.add_argument('--genome', help='genome', required=True)
    parser.add_argument('--base_data_dir', default="/hive/groups/recon/projs/mus_strain_cactus/pipeline_data/comparative/1504/augustus/")
    return parser.parse_args()

supertrack = """track augustus
superTrack on show
shortLabel AUGUSTUS
longLabel AUGUSTUS gene predictions
group genes
html /hive/groups/recon/projs/mus_strain_cactus/pipeline_data/comparative/1504/augustus/augustus.html

"""

tm = """    track augustusTM
    superTrack augustus pack
    shortLabel AUGUSTUS using TransMap
    longLabel AUGUSTUS using TransMap coding genes
    group genes
    type genePred
    priority 1.0
    color 200,0,0
    visibility hide

"""

tmr = """    track augustusTMR
    superTrack augustus pack
    shortLabel AUGUSTUS using TransMap and RNA-Seq
    longLabel AUGUSTUS using TransMap coding genes and RNA-Seq
    group genes
    type genePred
    priority 1.0
    color 255,0,0
    visibility pack

"""

searchtmr = """
# search by ensembl id
searchName augustusTMR_ens_id
searchTable augustusTMR
searchMethod prefix
searchType genePred
termRegex ENSMUST[0-9.]+
query select chrom, txStart, txEnd, name from %s where name2 like '%s%%'

# search by gene name
searchName augustusTMR_geneName
searchTable augustusTMR
searchMethod prefix
searchType genePred
query select chrom, txStart, txEnd, name from %s where name2 like '%s'
xrefTable MusC57B6J_1504.wgEncodeGencodeAttrsVM4
xrefQuery select transcriptId,geneName from %s where geneName like '%s%%'

# search by augustus ID
searchName augustusTMR
searchTable augustusTMR
searchMethod prefix
searchType genePred
termRegex aug-([0-9]+-|)ENSMUST[0-9.]+-[0-9]+

"""

searchcgp = """# search by CGP id
searchName augustusCGP
searchTable augustusCGP
searchMethod prefix
searchType genePred
termRegex g[0-9]+.t[0-9]+

"""

searchtm = """# search by ensembl id
searchName augustusTM_ens_id
searchTable augustusTM
searchMethod prefix
searchType genePred
termRegex ENSMUST[0-9.]+
query select chrom, txStart, txEnd, name from %s where name2 like '%s%%'

# search by gene name
searchName augustusTM_geneName
searchTable augustusTM
searchMethod prefix
searchType genePred
query select chrom, txStart, txEnd, name from %s where name2 like '%s'
xrefTable MusC57B6J_1504.wgEncodeGencodeAttrsVM4
xrefQuery select transcriptId,geneName from %s where geneName like '%s%%'

# search by augustus ID
searchName augustusTM
searchTable augustusTM
searchMethod prefix
searchType genePred
termRegex ENSMUST[0-9.]+-[0-9]+

"""

cgp = """    track augustusCGP
    superTrack augustus pack
    shortLabel comparative AUGUSTUS
    longLabel comparative AUGUSTUS
    group genes
    type genePred
    priority 1.0
    color 100,150,250
    visibility pack

"""

def make_ref_tracks(file_handle):
    file_handle.write(supertrack)
    file_handle.write(cgp)
    file_handle.write(searchcgp)

def make_individual_tracks(file_handle):
    file_handle.write(supertrack)
    dirs = ["tm", "tmr", "cgp"]
    for d in dirs:
        file_handle.write(eval(d))
    # have to write search defs after everything else
    for d in dirs:
        file_handle.write(eval('search' + d))

def main():
    args = parse_args()
    target_file_template = "trackDb/{0}/Mus{0}_{1}/augustus.trackDb.ra"
    file_map = {}
    if args.genome == args.ref_genome:
        target_file = target_file_template.format(args.ref_genome, args.assembly_version)
        with open(target_file, "w") as outf:
            make_ref_tracks(outf)
    elif args.assembly_version == "1504":
        target_file = target_file_template.format(args.genome, args.assembly_version)
        with open(target_file, "w") as outf:
            make_individual_tracks(outf)
    else:
        print "This script was called on a release that was not 1504 or not on the reference. Did nothing."
        sys.exit(1)


if __name__ == "__main__":
    main()
